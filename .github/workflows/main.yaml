name: main
on: [push, pull_request]

jobs:
  test:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
      fail-fast: false
    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write
    runs-on: ${{ matrix.os }}
    steps:
    - run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
    - uses: actions/checkout@v4
    - uses: denoland/setup-deno@v1
      with:
        deno-version: v1.x
    - uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest
    - run: deno task test --coverage=.cov --junit-path=.test-report.xml
    - uses: EnricoMi/publish-unit-test-result-action@v2
      if: runner.os == 'Linux' && always()
      with:
        check_name: "Test Results (Linux)"
        files: .test-report.xml
    - uses: EnricoMi/publish-unit-test-result-action/macos@v2
      if: runner.os == 'macOS' && always()
      with:
        check_name: "Test Results (macOS)"
        files: .test-report.xml
    - uses: EnricoMi/publish-unit-test-result-action/windows@v2
      if: runner.os == 'Windows' && always()
      with:
        check_name: "Test Results (Windows)"
        files: .test-report.xml
    - run: deno coverage --lcov .cov > .cov.lcov
    - uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: dahlia/logtape
        file: .cov.lcov
    - run: deno task dnt
    - run: bun run ./test_runner.js
      working-directory: ${{ github.workspace }}/npm/
    - run: deno task check

  publish:
    needs: [test]
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: denoland/setup-deno@v1
      with:
        deno-version: v1.x
    - if: github.ref_type == 'branch'
      run: |
        jq \
          --arg build "$GITHUB_RUN_NUMBER" \
          --arg commit "${GITHUB_SHA::8}" \
          '.version = .version + "-dev." + $build + "+" + $commit' \
          deno.json > deno.json.tmp
        mv deno.json.tmp deno.json
    - if: github.ref_type == 'tag'
      run: |
        set -ex
        [[ "$(jq -r .version deno.json)" = "$GITHUB_REF_NAME" ]]
    - run: 'deno task dnt "$(jq -r .version deno.json)"'
    - if: github.event_name == 'push'
      run: |
        set -ex
        npm config set //registry.npmjs.org/:_authToken "$NPM_AUTH_TOKEN"
        if [[ "$GITHUB_REF_TYPE" = "tag" ]]; then
          npm publish --provenance --access public
        else
          npm publish --provenance --access public --tag dev
        fi
      env:
        NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
      working-directory: ${{ github.workspace }}/npm/
    - if: github.event_name == 'pull_request'
      run: deno publish --dry-run --allow-dirty
    - if: github.event_name == 'push'
      run: deno publish --allow-dirty

  publish-docs:
    if: github.event_name == 'push'
    needs: [publish]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      pages: write
      deployments: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
    - uses: actions/checkout@v4
    - uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest
    - run: bun install
      working-directory: ${{ github.workspace }}/docs/
    - run: bun run build
      working-directory: ${{ github.workspace }}/docs/
    - uses: actions/upload-pages-artifact@v3
      with:
        path: docs/.vitepress/dist
    - id: deployment
      if: github.ref_type == 'tag'
      uses: actions/deploy-pages@v4
